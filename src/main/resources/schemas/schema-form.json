{
  "type" : "object",
  "id" : "urn:jsonschema:io:gravitee:connector:kafka:configuration:KafkaConnectorConfiguration",
  "properties" : {
    "common": {
      "type": "object",
      "title": "Common configuration",
      "id": "urn:jsonschema:io:gravitee:connector:kafka:configuration:CommonConfiguration",
      "properties": {
        "clientDnsLookup": {
          "title": "client.dns.lookup",
          "description": "Controls how the client uses DNS lookups. If set to <code>use_all_dns_ips</code>, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to <code>resolve_canonical_bootstrap_servers_only</code>, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as <code>use_all_dns_ips</code>. If set to <code>default</code> (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses.",
          "type": "string",
          "default": "USE_ALL_DNS_IPS",
          "enum": [
            "USE_ALL_DNS_IPS",
            "RESOLVE_CANONICAL_BOOTSTRAP_SERVERS_ONLY",
            "DEFAULT"
          ]
        }
      }
    },
    "consumer": {
      "type": "object",
      "title": "Consumer configuration",
      "id": "urn:jsonschema:io:gravitee:connector:kafka:configuration:ConsumerConfiguration",
      "properties": {
        "groupId": {
          "title": "group.id",
          "description": "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using <code>subscribe(topic)</code> or the Kafka-based offset management strategy.",
          "type": "string"
        },
        "groupInstanceId": {
          "title": "group.instance.id",
          "description": "A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.",
          "type": "string"
        },
        "sessionTimeoutMs": {
          "title": "session.timeout.ms",
          "description": "The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by <code>group.min.session.timeout.ms</code> and <code>group.max.session.timeout.ms</code>.",
          "type": "integer",
          "default": 10000
        },
        "heartbeatIntervalMs": {
          "title": "heartbeat.interval.ms",
          "description": "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than <code>session.timeout.ms</code>, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.",
          "type": "integer",
          "default": 3000
        },
        "partitionAssignmentStrategy": {
          "title": "partition.assignment.strategy",
          "description": "A list of class names or class types, ordered by preference, of supported partition assignment strategies that the client will use to distribute partition ownership amongst consumer instances when group management is used.<p>In addition to the default class specified below, you can use the <code>org.apache.kafka.clients.consumer.RoundRobinAssignor</code>class for round robin assignments of partitions to consumers. </p><p>Implementing the <code>org.apache.kafka.clients.consumer.ConsumerPartitionAssignor</code> interface allows you to plug in a custom assignmentstrategy.",
          "type": "string",
          "default": "org.apache.kafka.clients.consumer.RangeAssignor"
        },
        "metadataMaxAgeMs": {
          "title": "metadata.max.age.ms",
          "description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.",
          "type": "integer",
          "default": 300000,
          "minimum": 0
        },
        "enableAutoCommit": {
          "title": "enable.auto.commit",
          "description": "If true the consumer's offset will be periodically committed in the background.",
          "type": "boolean",
          "default": true
        },
        "autoCommitIntervalMs": {
          "title": "auto.commit.interval.ms",
          "description": "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if <code>enable.auto.commit</code> is set to <code>true</code>.",
          "type": "integer",
          "default": 5000,
          "minimum": 0
        },
        "clientId": {
          "title": "client.id",
          "description": "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.",
          "type": "string",
          "default": ""
        },
        "clientRack": {
          "title": "client.rack",
          "description": "A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config 'broker.rack'",
          "type": "string",
          "default": ""
        },
        "maxPartitionFetchBytes": {
          "title": "max.partition.fetch.bytes",
          "description": "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config). See fetch.max.bytes for limiting the consumer request size.",
          "type": "integer",
          "default": 1048576,
          "minimum": 0
        },
        "sendBufferBytes": {
          "title": "send.buffer.bytes",
          "description": "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.",
          "type": "integer",
          "default": 131072,
          "minimum": -1
        },
        "receiveBufferBytes": {
          "title": "receive.buffer.bytes",
          "description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.",
          "type": "integer",
          "default": 65536,
          "minimum": -1
        },
        "fetchMinBytes": {
          "title": "fetch.min.bytes",
          "description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.",
          "type": "integer",
          "default": 1,
          "minimum": 0
        },
        "fetchMaxBytes": {
          "title": "fetch.max.bytes",
          "description": "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via <code>message.max.bytes</code> (broker config) or <code>max.message.bytes</code> (topic config). Note that the consumer performs multiple fetches in parallel.",
          "type": "integer",
          "default": 52428800,
          "minimum": 0
        },
        "fetchMaxWaitMs": {
          "title": "fetch.max.wait.ms",
          "description": "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.",
          "type": "integer",
          "default": 500,
          "minimum": 0
        },
        "reconnectBackoffMs": {
          "title": "reconnect.backoff.ms",
          "description": "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.",
          "type": "integer",
          "default": 50,
          "minimum": 0
        },
        "reconnectBackoffMaxMs": {
          "title": "reconnect.backoff.max.ms",
          "description": "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.",
          "type": "integer",
          "default": 1000,
          "minimum": 0
        },
        "retryBackoffMs": {
          "title": "retry.backoff.ms",
          "description": "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.",
          "type": "integer",
          "default": 100,
          "minimum": 0
        },
        "autoOffsetReset": {
          "title": "auto.offset.reset",
          "description": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): <ul><li>earliest: automatically reset the offset to the earliest offset<li>latest: automatically reset the offset to the latest offset</li><li>none: throw exception to the consumer if no previous offset is found for the consumer's group</li><li>anything else: throw exception to the consumer.</li></ul>",
          "type": "string",
          "default": "latest",
          "enum": [
            "latest",
            "earliest",
            "none"
          ]
        },
        "checkCRCS": {
          "title": "check.crcs",
          "description": "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.",
          "type": "boolean",
          "default": true
        },
        "metricsSampleWindowMs": {
          "title": "metrics.sample.window.ms",
          "description": "The window of time a metrics sample is computed over.",
          "type": "integer",
          "default": 30000,
          "minimum": 0
        },
        "metricsNumSamples": {
          "title": "metrics.num.samples",
          "description": "The number of samples maintained to compute metrics.",
          "type": "integer",
          "default": 2,
          "minimum": 1
        },
        "metricsRecordingLevel": {
          "title": "metrics.recording.level",
          "description": "The highest recording level for metrics.",
          "type": "string",
          "default": "INFO",
          "enum": [
            "INFO",
            "DEBUG"
          ]
        },
        "metricReporters": {
          "title": "metric.reporters",
          "description": "A list of classes to use as metrics reporters. Implementing the <code>org.apache.kafka.common.metrics.MetricsReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
          "type": "string"
        },
        "keyDeserializer": {
          "title": "key.deserializer",
          "description": "Deserializer class for key that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringDeserializer"
        },
        "valueDeserializer": {
          "title": "value.deserializer",
          "description": "Deserializer class for value that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringDeserializer"
        },
        "requestTimeoutMs": {
          "title": "request.timeout.ms",
          "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
          "type": "integer",
          "default": 30000,
          "minimum": 0
        },
        "defaultApiTimeoutMs": {
          "title": "default.api.timeout.ms",
          "description": "Specifies the timeout (in milliseconds) for client APIs. This configuration is used as the default timeout for all client operations that do not specify a <code>timeout</code> parameter.",
          "type": "integer",
          "default": 60000,
          "minimum": 0
        },
        "connectionsMaxIdleMs": {
          "title": "connections.max.idle.ms",
          "description": "Close idle connections after the number of milliseconds specified by this config.",
          "type": "integer",
          "default": 540000
        },
        "interceptorClasses": {
          "title": "interceptor.classes",
          "description": "A list of classes to use as interceptors. Implementing the <code>org.apache.kafka.clients.consumer.ConsumerInterceptor</code> interface allows you to intercept (and possibly mutate) records received by the consumer. By default, there are no interceptors.",
          "type": "string"
        },
        "maxPollRecords": {
          "title": "max.poll.records",
          "description": "The maximum number of records returned in a single call to poll().",
          "type": "integer",
          "default": 500,
          "minimum": 1
        },
        "maxPollIntervalMs": {
          "title": "max.poll.interval.ms",
          "description": "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. For consumers using a non-null <code>group.instance.id</code> which reach this timeout, partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of <code>session.timeout.ms</code>. This mirrors the behavior of a static consumer which has shutdown.",
          "type": "integer",
          "default": 300000,
          "minimum": 1
        },
        "excludeInternalTopics": {
          "title": "exclude.internal.topics",
          "description": "Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.",
          "type": "boolean",
          "default": true
        },
        "isolationLevel": {
          "title": "isolation.level",
          "description": "Controls how to read messages written transactionally. If set to <code>read_committed</code>, consumer.poll() will only return transactional messages which have been committed. If set to <code>read_uncommitted</code>' (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. <p>Messages will always be returned in offset order. Hence, in  <code>read_committed</code> mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, <code>read_committed</code> consumers will not be able to read up to the high watermark when there are in flight transactions.</p><p> Further, when in <code>read_committed</code> the seekToEnd method will return the LSO",
          "type": "string",
          "default": "READ_UNCOMMITTED",
          "enum": [
            "READ_COMMITTED",
            "READ_UNCOMMITTED"
          ]
        },
        "allowAutoCreateTopics": {
          "title": "allow.auto.create.topics",
          "description": "Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using `auto.create.topics.enable` broker configuration. This configuration must be set to `false` when using brokers older than 0.11.0",
          "type": "boolean",
          "default": true
        },
        "securityProviders": {
          "title": "security.providers",
          "description": "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the <code>org.apache.kafka.common.security.auth.SecurityProviderCreator</code> interface.",
          "type": "string"
        },
        "securityProtocol": {
          "title": "security.protocol",
          "description": "Protocol used to communicate with brokers.",
          "type": "string",
          "default": "PLAINTEXT",
          "enum": [
            "PLAINTEXT",
            "SSL",
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        }
      },
      "x-schema-form": {
        "open": false
      }
    },
    "producer": {
      "type": "object",
      "title": "Producer configuration",
      "id": "urn:jsonschema:io:gravitee:connector:kafka:configuration:ProducerConfiguration",
      "properties": {
        "bufferMemory": {
          "title": "buffer.memory",
          "description": "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for <code>max.block.ms</code> after which it will throw an exception.<p>This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.",
          "type": "integer",
          "default": 33554432,
          "minimum": 0
        },
        "retries": {
          "title": "retries",
          "description": "Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting <code>max.in.flight.requests.per.connection</code> to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first. Note additionally that produce requests will be failed before the number of retries has been exhausted if the timeout configured by <code>delivery.timeout.ms</code> expires first before successful acknowledgement. Users should generally prefer to leave this config unset and instead use <code>delivery.timeout.ms</code> to control retry behavior.",
          "type": "integer",
          "default": 2147483647,
          "minimum": 0,
          "maximum": 2147483647
        },
        "acks": {
          "title": "acks",
          "description": "The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the  durability of records that are sent. The following settings are allowed:  <ul> <li><code>acks=0</code> If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the <code>retries</code> configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to <code>-1</code>. <li><code>acks=1</code> This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. <li><code>acks=all</code> This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting.</ul>",
          "type": "string",
          "default": "1",
          "enum": [
            "all",
            "-1",
            "0",
            "1"
          ]
        },
        "compressionType": {
          "title": "compression.type",
          "description": "The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid  values are <code>none</code>, <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, or <code>zstd</code>. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).",
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "gzip",
            "snappy",
            "lz4",
            "zstd"
          ]
        },
        "batchSize": {
          "title": "batch.size",
          "description": "The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. <p>No attempt will be made to batch records larger than this size. <p>Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent. <p>A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.",
          "type": "integer",
          "default": 16384,
          "minimum": 0
        },
        "lingerMs": {
          "title": "linger.ms",
          "description": "The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay&mdash;that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get <code>batch.size</code> worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting <code>linger.ms=5</code>, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load.",
          "type": "integer",
          "default": 0,
          "minimum": 0
        },
        "deliveryTimeoutMs": {
          "title": "delivery.timeout.ms",
          "description": "An upper bound on the time to report success or failure after a call to <code>send()</code> returns. This limits the total time that a record will be delayed prior to sending, the time to await acknowledgement from the broker (if expected), and the time allowed for retriable send failures. The producer may report failure to send a record earlier than this config if either an unrecoverable error is encountered, the retries have been exhausted, or the record is added to a batch which reached an earlier delivery expiration deadline. The value of this config should be greater than or equal to the sum of <code>request.timeout.ms</code> and <code>linger.ms</code>.",
          "type": "integer",
          "default": 120000,
          "minimum": 0
        },
        "clientId": {
          "title": "client.id",
          "description": "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.",
          "type": "string",
          "default": ""
        },
        "sendBufferBytes": {
          "title": "send.buffer.bytes",
          "description": "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.",
          "type": "integer",
          "default": 131072,
          "minimum": -1
        },
        "receiveBufferBytes": {
          "title": "receive.buffer.bytes",
          "description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.",
          "type": "integer",
          "default": 32768,
          "minimum": -1
        },
        "maxRequestSize": {
          "title": "max.request.size",
          "description": "The maximum size of a request in bytes. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests. This is also effectively a cap on the maximum uncompressed record batch size. Note that the server has its own cap on the record batch size (after compression if compression is enabled) which may be different from this.",
          "type": "integer",
          "default": 1048576,
          "minimum": -1
        },
        "reconnectBackoffMs": {
          "title": "reconnect.backoff.ms",
          "description": "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.",
          "type": "integer",
          "default": 50,
          "minimum": 0
        },
        "reconnectBackoffMaxMs": {
          "title": "reconnect.backoff.max.ms",
          "description": "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.",
          "type": "integer",
          "default": 1000,
          "minimum": 0
        },
        "retryBackoffMs": {
          "title": "retry.backoff.ms",
          "description": "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.",
          "type": "integer",
          "default": 100,
          "minimum": 0
        },
        "maxBlockMs": {
          "title": "max.block.ms",
          "description": "The configuration controls how long <code>KafkaProducer.send()</code> and <code>KafkaProducer.partitionsFor()</code> will block.These methods can be blocked either because the buffer is full or metadata unavailable.Blocking in the user-supplied serializers or partitioner will not be counted against this timeout.",
          "type": "integer",
          "default": 60000,
          "minimum": 0
        },
        "requestTimeoutMs": {
          "title": "request.timeout.ms",
          "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than <code>replica.lag.time.max.ms</code> (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.",
          "type": "integer",
          "default": 30000,
          "minimum": 0
        },
        "metadataMaxAgeMs": {
          "title": "metadata.max.age.ms",
          "description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.",
          "type": "integer",
          "default": 30000,
          "minimum": 0
        },
        "metadataMaxIdleMs": {
          "title": "metadata.max.idle.ms",
          "description": "Controls how long the producer will cache metadata for a topic that's idle. If the elapsed time since a topic was last produced to exceeds the metadata idle duration, then the topic's metadata is forgotten and the next access to it will force a metadata fetch request.",
          "type": "integer",
          "default": 300000,
          "minimum": 5000
        },
        "metricsSampleWindowMs": {
          "title": "metrics.sample.window.ms",
          "description": "The window of time a metrics sample is computed over.",
          "type": "integer",
          "default": 30000,
          "minimum": 0
        },
        "metricsNumSamples": {
          "title": "metrics.num.samples",
          "description": "The number of samples maintained to compute metrics.",
          "type": "integer",
          "default": 2,
          "minimum": 1
        },
        "metricsRecordingLevel": {
          "title": "metrics.recording.level",
          "description": "The highest recording level for metrics.",
          "type": "string",
          "default": "INFO",
          "enum": [
            "INFO",
            "DEBUG"
          ]
        },
        "metricReporters": {
          "title": "metric.reporters",
          "description": "A list of classes to use as metrics reporters. Implementing the <code>org.apache.kafka.common.metrics.MetricsReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
          "type": "string"
        },
        "maxInFlightRequestsPerConnection": {
          "title": "max.in.flight.requests.per.connection",
          "description": "The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).",
          "type": "integer",
          "default": 5,
          "minimum": 1
        },
        "keySerializer": {
          "title": "key.serializer",
          "description": "Serializer class for key that implements the <code>org.apache.kafka.common.serialization.Serializer</code> interface.",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringSerializer"
        },
        "valueSerializer": {
          "title": "value.serializer",
          "description": "Serializer class for value that implements the <code>org.apache.kafka.common.serialization.Serializer</code> interface.",
          "type": "string",
          "default": "org.apache.kafka.common.serialization.StringSerializer"
        },
        "connectionsMaxIdleMs": {
          "title": "connections.max.idle.ms",
          "description": "Close idle connections after the number of milliseconds specified by this config.",
          "type": "integer",
          "default": 540000
        },
        "partitionerClass": {
          "title": "partitioner.class",
          "description": "Partitioner class that implements the <code>org.apache.kafka.clients.producer.Partitioner</code> interface.",
          "type": "string",
          "default": "org.apache.kafka.clients.producer.internals.DefaultPartitioner"
        },
        "interceptorClasses": {
          "title": "interceptor.classes",
          "description": "A list of classes to use as interceptors. Implementing the <code>org.apache.kafka.clients.consumer.ConsumerInterceptor</code> interface allows you to intercept (and possibly mutate) records received by the consumer. By default, there are no interceptors.",
          "type": "string"
        },
        "securityProtocol": {
          "title": "security.protocol",
          "description": "Protocol used to communicate with brokers.",
          "type": "string",
          "default": "PLAINTEXT",
          "enum": [
            "PLAINTEXT",
            "SSL",
            "SASL_PLAINTEXT",
            "SASL_SSL"
          ]
        },
        "securityProviders": {
          "title": "security.providers",
          "description": "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the <code>org.apache.kafka.common.security.auth.SecurityProviderCreator</code> interface.",
          "type": "string"
        },
        "enableIdempotence": {
          "title": "enable.idempotence",
          "description": "When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream. If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires <code>max.in.flight.requests.per.connection</code> to be less than or equal to 5, <code>retries</code> to be greater than 0 and <code>acks</code> must be 'all'. If these values are not explicitly set by the user, suitable values will be chosen. If incompatible values are set, a <code>ConfigException</code> will be thrown.",
          "type": "boolean",
          "default": false
        },
        "transactionTimeoutMs": {
          "title": "transaction.timeout.ms",
          "description": "The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.If this value is larger than the transaction.max.timeout.ms setting in the broker, the request will fail with a <code>InvalidTransactionTimeout</code> error.",
          "type": "integer",
          "default": 60000
        },
        "transactionalId": {
          "title": "transactional.id",
          "description": "The TransactionalId to use for transactional delivery. This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions. If no TransactionalId is provided, then the producer is limited to idempotent delivery. If a TransactionalId is configured, <code>enable.idempotence</code> is implied. By default the TransactionId is not configured, which means transactions cannot be used. Note that, by default, transactions require a cluster of at least three brokers which is the recommended setting for production; for development you can change this, by adjusting broker setting <code>transaction.state.log.replication.factor</code>.",
          "type": "string",
          "default": ""
        }
      },
      "x-schema-form": {
        "open": false
      }
    },
    "sasl": {
      "type": "object",
      "title": "SASL configuration",
      "id": "urn:jsonschema:io:gravitee:connector:kafka:configuration:SaslConfiguration",
      "properties": {
        "mechanism": {
          "title": "sasl.mechanism",
          "description": "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.",
          "type": "string",
          "default": "GSSAPI"
        },
        "jaasConfig": {
          "title": "sasl.jaas.config",
          "description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html. The format for the value is: '<code>loginModuleClass controlFlag (optionName=optionValue)*;</code>'.",
          "type": "string"
        },
        "clientCallbackHandlerClass": {
          "title": "sasl.client.callback.handler.class",
          "description": "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.",
          "type": "string"
        },
        "loginCallbackHandlerClass": {
          "title": "sasl.login.callback.handler.class",
          "description": "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface.",
          "type": "string"
        },
        "loginClass": {
          "title": "sasl.login.class",
          "description": "The fully qualified name of a class that implements the Login interface.",
          "type": "string"
        },
        "loginRefreshWindowFactor": {
          "title": "sasl.login.refresh.window.factor",
          "description": "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
          "type": "number",
          "maximum": 1,
          "minimum": 0.5,
          "default": 0.8
        },
        "loginRefreshWindowJitter": {
          "title": "sasl.login.refresh.window.jitter",
          "description": "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
          "type": "number",
          "maximum": 0.25,
          "default": 0.05
        },
        "loginRefreshMinPeriodSeconds": {
          "title": "sasl.login.refresh.min.period.seconds",
          "description": "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified.  This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
          "type": "integer",
          "maximum": 900,
          "default": 60
        },
        "loginRefreshBufferSeconds": {
          "title": "sasl.login.refresh.buffer.seconds",
          "description": "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of  300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
          "type": "integer",
          "maximum": 3600,
          "default": 300
        }
      },
      "x-schema-form": {
        "open": false
      }
    },
    "ssl": {
      "type": "object",
      "title": "SSL configuration",
      "id": "urn:jsonschema:io:gravitee:connector:kafka:configuration:SslConfiguration",
      "properties": {
        "protocol": {
          "title": "ssl.protocol",
          "description": "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.",
          "type": "string",
          "default": "TLSv1.3"
        },
        "provider": {
          "title": "ssl.provider",
          "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
          "type": "string"
        },
        "cipherSuites": {
          "title": "ssl.cipher.suites",
          "description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enabledProtocols": {
          "title": "ssl.enabled.protocols",
          "description": "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for `ssl.protocol`.",
          "type": "string",
          "default": "TLSv1.2,TLSv1.3"
        },
        "keystoreType": {
          "title": "ssl.keystore.type",
          "description": "The file format of the key store file. This is optional for client.",
          "type": "string",
          "default": "JKS"
        },
        "keystoreLocation": {
          "title": "ssl.keystore.location",
          "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
          "type": "string"
        },
        "keystorePassword": {
          "title": "ssl.keystore.password",
          "description": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.",
          "type": "string"
        },
        "keyPassword": {
          "title": "ssl.key.password",
          "description": "The password of the private key in the key store file. This is optional for client.",
          "type": "string"
        },
        "truststoreType": {
          "title": "ssl.truststore.type",
          "description": "The file format of the trust store file.",
          "type": "string",
          "default": "JKS"
        },
        "truststoreLocation": {
          "title": "ssl.truststore.location",
          "description": "The location of the trust store file.",
          "type": "string"
        },
        "truststorePassword": {
          "title": "ssl.truststore.password",
          "description": "The password for the trust store file. If a password is not set access to the truststore is still available, but integrity checking is disabled.",
          "type": "string"
        },
        "keymanagerAlgorithm": {
          "title": "ssl.keymanager.algorithm",
          "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
          "type": "string"
        },
        "trustmanagerAlgorithm": {
          "title": "ssl.trustmanager.algorithm",
          "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
          "type": "string"
        },
        "endpointIdentificationAlgorithm": {
          "title": "ssl.endpoint.identification.algorithm",
          "description": "The endpoint identification algorithm to validate server hostname using server certificate.",
          "type": "string",
          "default": "https"
        },
        "secureRandomImplementation": {
          "title": "ssl.secure.random.implementation",
          "description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
          "type": "string"
        },
        "engineFactoryClass": {
          "title": "ssl.engine.factory.class",
          "description": "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects.",
          "type": "string",
          "default": "org.apache.kafka.common.security.ssl.DefaultSslEngineFactory"
        }
      },
      "x-schema-form": {
        "open": false
      }
    }
  },
  "additionalProperties": false,
  "patternProperties": {
    "backup": true,
    "healthcheck": true,
    "inherit": true,
    "name": true,
    "target": true,
    "tenants": true,
    "type": true,
    "weight": true
  }
}
